{"m":"//settings\nconst RAD = Math.PI/180 ;\nconst P2 = Math.PI*2 \nPOX.setting = {\n\tname:\"void_temp1\",\n\tscale:1.0,\n\tpixRatio:1,\n\thighRefreshRate:true,\n\tfoveationLevel:3,\n\tcam:{\n\t\tcamMode:\"walk\",\n\t\tcamCX:5,\n\t\tcamCZ:5,\n\t\tcamCY:1.5,\n\t\tcamRX:0,\n\t\tcamRY:-45,\n\t\tgPad:true,\n\t\tcamAngle:90\n\t}\n};\n\n// light params\nconst lvec = [\n\t\t[0,5,1],\n\t\t[0,-1,0]\n\t]\nconst lcol = [\n\t\t[1,1,1],\n\t\t[0.5,0.5,1]\n\t]\nconst lparam = [\n\t\t[1,0],\n\t\t[0.5,0]\n\t]\n\n//make scenedata\nlet scene \nlet panel\nPOX.init = async () => {\n\nscene={\n\t//environment params\n\tenv:{clear_color:[0.2,0.2,0.4,1.0],cull:true},\n\t//vertex shader uniform data\n\tvs_uni:{\n\t\tcol:[1.0,1,1.0,1.0]\n\t},\n\t//flagment shader uniform data\n\tfs_uni:{\n\t\tpamb:0.2,\n\t\tpdiff:0.8,\n\t\tpspec:0.4,\n\t\tpref:0.0,\n\t\tdspec:60,\n\t\tambcolor:[0.5,0.5,1],\n\t\tlvec:lvec,\n\t\tlcol:lcol,\n\t\tlparam:lparam,\n\t\tcolmode:0,\n\t\tshmode:0,\n\t\tbcolor:[1,0,0,1]\n\t},\n\ttexture:[\n//\t\t{src:\"sample/tex1024.png\"}\n\t],\n\tmodel:[\n\t\t{geo:new WWModel().primitive(\"box\",{wx:1,wy:1,wz:1}).objModel(),\n\t\t\tbm:new Mat4().translate(0,1,0) \n\t\t},\n\t\t{geo:new WWModel().primitive(\"sphere\",{wx:1,wy:1,wz:1}).objModel(),\n\t\t\tbm:new Mat4().translate(0,4,0) ,\n\t\t\tfs_uni:{bcolor:[1,1,1,1]}\n\t\t},\n\n\t\t{name:\"base\",\n\t\tgeo:new WWModel().primitive(\"plane\",{wx:100,wz:100}).objModel(),\n\t\t\tfs_uni:{bcolor:[0.5,0.5,0.5,1.0],colmode:3}\n\t\t},\n\t\t{name:\"axis\",\n\t\tgeo:{mode:\"lines\",\n\t\t\tvtx_at:[\"position\"],\n\t\t\tvtx:[0,0,0,200,0,0,0,0,0,0,200,0,0,0,0,0,0,200]},\n\t\t\tfs_uni:{colmode:0,shmode:1,pamb:1,pdiff:0,pspec:0}},\n\t\t{name:\"sky\",\n\t\tgeo:new WWModel().primitive(\"sphere\",{div:10,wx:200,wy:200,wz:200,ninv:true}).objModel(),\n\t\t\tfs_uni:{colmode:4,shmode:1}\n\t\t}\n\t]\n}\n//set scene and rendering start\n\tPOX.setScene(scene).then((d)=>{\n\t\tpanel = new Cpanel(POX.render) \n\t});\t\n}\n\nlet gp = null\n//sceneupdate function for each frame\nPOX.update=function(render,cam,time){\n\tlet ret={};\n\n\tif(panel) {\n\t\tlet txt =[POX.poxp.param.fps]\n\t\t\ttxt[1] = cam.camCX\n\t\t\ttxt[2] = cam.camCY\n\t\t\ttxt[3] = cam.camCZ\n\t\t\ttxt[4] = cam.camRY\n\t\tpanel.update(render,txt)\n\t}\n\treturn ret;\n}\n//key event handling\nPOX.event= function(kind,ev) {\n\tlet ret = true\n\tif(kind==\"gpad\") gp = ev ;\n\tif(kind==\"vrchange\") {\n\t\tif(ev==1) {\n\t\t\tPOX.cam.camRX = 0 \n\t\t}\n\t}\n\treturn ret;\n}\n\n","vs":"attribute vec3 position;\nattribute vec3 norm;\nattribute vec2 uv ;\n\nuniform mat4 mvpMatrix;\nuniform mat4 invMatrix;\nuniform mat4 modelMatrix;\nuniform vec4 col;\n\nvarying vec3 tnorm ;\nvarying vec4 tcolor ;\nvarying vec3 tpos ;\nvarying vec2 tuv ;\n\nvoid main() {\n\ttuv = vec2(uv.x,1.-uv.y) ;\n\ttcolor = col ;\n\ttnorm = (invMatrix * vec4(norm,0.0)).xyz ;\n\ttpos = (modelMatrix * vec4(position,1.0)).xyz ;\n\tgl_Position =  mvpMatrix * vec4(position, 1.0) ;\n}\n","fs":"precision mediump float;\nconst int lnum = 2 ;\n\t\nuniform int colmode ;\t//0:basecolor 1:vertex color  2:texture 3:checker 4:sky\nuniform int shmode ;\t//0:normal shading 1:no shading\nuniform vec4 bcolor ;\nuniform vec3 eyevec ;\nuniform float pamb ;\nuniform float pdiff ;\nuniform float pspec ;\nuniform float pref ;\nuniform float dspec ;\nuniform vec3 ambcolor ;\nuniform vec3 lvec[2];\nuniform vec3 lcol[2];\nuniform vec2 lparam[2] ;\nuniform float time ;\nuniform sampler2D tex1;\n\nvarying vec3 tnorm ;\nvarying vec4 tcolor ;\nvarying vec3 tpos ;\nvarying vec2 tuv ;\n\nconst float PI = radians(180.) ;\nconst vec3 spcol = vec3(1.,1.,1.) ;\nconst float dd = 0.5 ;\nconst float gamma = 1.0 ;\nconst float checkdiv = 0.02 ;\n\nvec3 skycol(vec2 uv) {\n\tvec3 col ;\n\tconst vec3 skycol = vec3(0.4,0.4,1.0);\n\tconst vec3 horizoncol = vec3(0.8,0.8,0.8) ;\n\tconst vec3 fieldcol = vec3(0.4,1.0,0.4) ;\n\tif(uv.y<0.5) col = mix(skycol,horizoncol,pow(uv.y*2.,5.)) ;\n\telse col = mix(horizoncol,fieldcol,pow(uv.y-0.5,1.)*2.);\n\treturn col ;\n}\n\nvec3 shade(vec3 col,vec3 norm) {\n\tvec3 ev = eyevec - tpos ;\n\tint i ;\n\tfloat diff,spec ;\n\tvec3 fcolor = vec3(0.);\n\tvec3 rcolor = vec3(0.) ;\n\t\n\tfor(int i=0;i<lnum;i++) {\n\t\tfloat lp = lparam[i].x ;\n\t\tif(lp==0.) continue ;\n\t\tvec3 lv = lvec[i] ;\n\t\tif(lparam[i].y!=0.) {\n\t\t\tlv = lv - tpos ;\n\t\t\tlp = (1.- pow(clamp(length(lv)/lparam[i].y,0.,1.),2.))*lparam[i].x ;\n\t\t}\n\t\tlv = normalize(lv) ;\n\t\tdiff= clamp((dot(norm,lv)+dd)/(1.+dd),0.0,1.0);\n\t\tif(pspec>0.)\n\t\t\tspec= pow(clamp(dot(norm,normalize(lv+normalize(ev))),0.0,1.0),dspec);\n\t\tfcolor = fcolor + (col * diff * pdiff + spcol* spec * pspec)*lcol[i].rgb*lp;\n\t}\n\tif(pref>0.) {\n\t\tvec3 ref = normalize(reflect(tpos - eyevec, tnorm));\n\t\tvec2 tc = vec2(\n\t\t\t\t(sign(ref.x)*acos(ref.z/sqrt(ref.x*ref.x+ref.z*ref.z))/PI+1.0)/2.0,\n\t\t\t\tacos(ref.y)/PI\n\t\t\t) ;\n\t\trcolor = skycol(tc) ;\n\t}\n\tfcolor = fcolor + col * ambcolor * pamb + rcolor * pref ;\n\tfcolor = pow(fcolor,vec3(1./gamma)) ;\n\treturn fcolor ;\n}\n\n\nvoid main() {\n\tvec4 color = (colmode==1)?tcolor:(colmode==2)?texture2D(tex1,tuv):bcolor ;\n\tvec3 col = color.rgb ;\n\tif(colmode==3) {\n\t\tcol = col * \n\t\t(((mod(tuv.x ,checkdiv) < checkdiv/2.) ^^ (mod(tuv.y ,checkdiv) < checkdiv/2.))?1.:0.8) ;\n\t}\n\tif(colmode==4) {\n\t\tfloat sun = clamp(dot(normalize(lvec[0]),-normalize(reflect(normalize(tpos), tnorm))),0.,1.) ;\n\t\tcol = skycol(tuv) + pow(sun,80.) * lcol[0]*0.6 ;\n\t}\n\tvec3 norm = normalize(tnorm) ;\n\n\tgl_FragColor = vec4((shmode!=1)?shade(col,norm):col,color.a);\n}\n"}